package com.real.doctor.realdoc.greendao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.real.doctor.realdoc.model.ImageBean;
import com.real.doctor.realdoc.model.ImageListBean;
import com.real.doctor.realdoc.model.RecordBean;
import com.real.doctor.realdoc.model.SaveDocBean;
import com.real.doctor.realdoc.model.VideoBean;

import com.real.doctor.realdoc.greendao.ImageBeanDao;
import com.real.doctor.realdoc.greendao.ImageListBeanDao;
import com.real.doctor.realdoc.greendao.RecordBeanDao;
import com.real.doctor.realdoc.greendao.SaveDocBeanDao;
import com.real.doctor.realdoc.greendao.VideoBeanDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig imageBeanDaoConfig;
    private final DaoConfig imageListBeanDaoConfig;
    private final DaoConfig recordBeanDaoConfig;
    private final DaoConfig saveDocBeanDaoConfig;
    private final DaoConfig videoBeanDaoConfig;

    private final ImageBeanDao imageBeanDao;
    private final ImageListBeanDao imageListBeanDao;
    private final RecordBeanDao recordBeanDao;
    private final SaveDocBeanDao saveDocBeanDao;
    private final VideoBeanDao videoBeanDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        imageBeanDaoConfig = daoConfigMap.get(ImageBeanDao.class).clone();
        imageBeanDaoConfig.initIdentityScope(type);

        imageListBeanDaoConfig = daoConfigMap.get(ImageListBeanDao.class).clone();
        imageListBeanDaoConfig.initIdentityScope(type);

        recordBeanDaoConfig = daoConfigMap.get(RecordBeanDao.class).clone();
        recordBeanDaoConfig.initIdentityScope(type);

        saveDocBeanDaoConfig = daoConfigMap.get(SaveDocBeanDao.class).clone();
        saveDocBeanDaoConfig.initIdentityScope(type);

        videoBeanDaoConfig = daoConfigMap.get(VideoBeanDao.class).clone();
        videoBeanDaoConfig.initIdentityScope(type);

        imageBeanDao = new ImageBeanDao(imageBeanDaoConfig, this);
        imageListBeanDao = new ImageListBeanDao(imageListBeanDaoConfig, this);
        recordBeanDao = new RecordBeanDao(recordBeanDaoConfig, this);
        saveDocBeanDao = new SaveDocBeanDao(saveDocBeanDaoConfig, this);
        videoBeanDao = new VideoBeanDao(videoBeanDaoConfig, this);

        registerDao(ImageBean.class, imageBeanDao);
        registerDao(ImageListBean.class, imageListBeanDao);
        registerDao(RecordBean.class, recordBeanDao);
        registerDao(SaveDocBean.class, saveDocBeanDao);
        registerDao(VideoBean.class, videoBeanDao);
    }
    
    public void clear() {
        imageBeanDaoConfig.clearIdentityScope();
        imageListBeanDaoConfig.clearIdentityScope();
        recordBeanDaoConfig.clearIdentityScope();
        saveDocBeanDaoConfig.clearIdentityScope();
        videoBeanDaoConfig.clearIdentityScope();
    }

    public ImageBeanDao getImageBeanDao() {
        return imageBeanDao;
    }

    public ImageListBeanDao getImageListBeanDao() {
        return imageListBeanDao;
    }

    public RecordBeanDao getRecordBeanDao() {
        return recordBeanDao;
    }

    public SaveDocBeanDao getSaveDocBeanDao() {
        return saveDocBeanDao;
    }

    public VideoBeanDao getVideoBeanDao() {
        return videoBeanDao;
    }

}
