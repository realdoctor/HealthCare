package com.real.doctor.realdoc.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.real.doctor.realdoc.model.MessageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_BEAN".
*/
public class MessageBeanDao extends AbstractDao<MessageBean, String> {

    public static final String TABLENAME = "MESSAGE_BEAN";

    /**
     * Properties of entity MessageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Groupid = new Property(2, String.class, "groupid", false, "GROUPID");
        public final static Property Groupname = new Property(3, String.class, "groupname", false, "GROUPNAME");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Reason = new Property(5, String.class, "reason", false, "REASON");
        public final static Property Status = new Property(6, String.class, "status", false, "STATUS");
        public final static Property IsInviteFromMe = new Property(7, String.class, "isInviteFromMe", false, "IS_INVITE_FROM_ME");
        public final static Property Groupinviter = new Property(8, String.class, "groupinviter", false, "GROUPINVITER");
        public final static Property UnreadMsgCount = new Property(9, String.class, "unreadMsgCount", false, "UNREAD_MSG_COUNT");
    }


    public MessageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MessageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"GROUPID\" TEXT," + // 2: groupid
                "\"GROUPNAME\" TEXT," + // 3: groupname
                "\"TIME\" TEXT," + // 4: time
                "\"REASON\" TEXT," + // 5: reason
                "\"STATUS\" TEXT," + // 6: status
                "\"IS_INVITE_FROM_ME\" TEXT," + // 7: isInviteFromMe
                "\"GROUPINVITER\" TEXT," + // 8: groupinviter
                "\"UNREAD_MSG_COUNT\" TEXT);"); // 9: unreadMsgCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String groupid = entity.getGroupid();
        if (groupid != null) {
            stmt.bindString(3, groupid);
        }
 
        String groupname = entity.getGroupname();
        if (groupname != null) {
            stmt.bindString(4, groupname);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(6, reason);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
 
        String isInviteFromMe = entity.getIsInviteFromMe();
        if (isInviteFromMe != null) {
            stmt.bindString(8, isInviteFromMe);
        }
 
        String groupinviter = entity.getGroupinviter();
        if (groupinviter != null) {
            stmt.bindString(9, groupinviter);
        }
 
        String unreadMsgCount = entity.getUnreadMsgCount();
        if (unreadMsgCount != null) {
            stmt.bindString(10, unreadMsgCount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String groupid = entity.getGroupid();
        if (groupid != null) {
            stmt.bindString(3, groupid);
        }
 
        String groupname = entity.getGroupname();
        if (groupname != null) {
            stmt.bindString(4, groupname);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(6, reason);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
 
        String isInviteFromMe = entity.getIsInviteFromMe();
        if (isInviteFromMe != null) {
            stmt.bindString(8, isInviteFromMe);
        }
 
        String groupinviter = entity.getGroupinviter();
        if (groupinviter != null) {
            stmt.bindString(9, groupinviter);
        }
 
        String unreadMsgCount = entity.getUnreadMsgCount();
        if (unreadMsgCount != null) {
            stmt.bindString(10, unreadMsgCount);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MessageBean readEntity(Cursor cursor, int offset) {
        MessageBean entity = new MessageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // groupname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // reason
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // isInviteFromMe
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // groupinviter
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // unreadMsgCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroupid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroupname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReason(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsInviteFromMe(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGroupinviter(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUnreadMsgCount(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MessageBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(MessageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
