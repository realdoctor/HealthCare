package com.real.doctor.realdoc.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.real.doctor.realdoc.model.RecordBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD_BEAN".
*/
public class RecordBeanDao extends AbstractDao<RecordBean, String> {

    public static final String TABLENAME = "RECORD_BEAN";

    /**
     * Properties of entity RecordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FileName = new Property(0, String.class, "fileName", true, "FILE_NAME");
        public final static Property FilePath = new Property(1, String.class, "filePath", false, "FILE_PATH");
        public final static Property ElapsedMillis = new Property(2, String.class, "elapsedMillis", false, "ELAPSED_MILLIS");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
        public final static Property Folder = new Property(4, String.class, "folder", false, "FOLDER");
        public final static Property Advice = new Property(5, String.class, "advice", false, "ADVICE");
        public final static Property RecordId = new Property(6, String.class, "recordId", false, "RECORD_ID");
        public final static Property IsPatient = new Property(7, String.class, "isPatient", false, "IS_PATIENT");
    }

    private Query<RecordBean> saveDocBean_AudioListQuery;

    public RecordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RecordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_BEAN\" (" + //
                "\"FILE_NAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: fileName
                "\"FILE_PATH\" TEXT," + // 1: filePath
                "\"ELAPSED_MILLIS\" TEXT," + // 2: elapsedMillis
                "\"DATE\" TEXT," + // 3: date
                "\"FOLDER\" TEXT," + // 4: folder
                "\"ADVICE\" TEXT," + // 5: advice
                "\"RECORD_ID\" TEXT," + // 6: recordId
                "\"IS_PATIENT\" TEXT);"); // 7: isPatient
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecordBean entity) {
        stmt.clearBindings();
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(1, fileName);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(2, filePath);
        }
 
        String elapsedMillis = entity.getElapsedMillis();
        if (elapsedMillis != null) {
            stmt.bindString(3, elapsedMillis);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        String folder = entity.getFolder();
        if (folder != null) {
            stmt.bindString(5, folder);
        }
 
        String advice = entity.getAdvice();
        if (advice != null) {
            stmt.bindString(6, advice);
        }
 
        String recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindString(7, recordId);
        }
 
        String isPatient = entity.getIsPatient();
        if (isPatient != null) {
            stmt.bindString(8, isPatient);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecordBean entity) {
        stmt.clearBindings();
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(1, fileName);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(2, filePath);
        }
 
        String elapsedMillis = entity.getElapsedMillis();
        if (elapsedMillis != null) {
            stmt.bindString(3, elapsedMillis);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        String folder = entity.getFolder();
        if (folder != null) {
            stmt.bindString(5, folder);
        }
 
        String advice = entity.getAdvice();
        if (advice != null) {
            stmt.bindString(6, advice);
        }
 
        String recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindString(7, recordId);
        }
 
        String isPatient = entity.getIsPatient();
        if (isPatient != null) {
            stmt.bindString(8, isPatient);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public RecordBean readEntity(Cursor cursor, int offset) {
        RecordBean entity = new RecordBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // fileName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // filePath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // elapsedMillis
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // folder
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // advice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // recordId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // isPatient
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecordBean entity, int offset) {
        entity.setFileName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFilePath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setElapsedMillis(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFolder(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAdvice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRecordId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsPatient(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(RecordBean entity, long rowId) {
        return entity.getFileName();
    }
    
    @Override
    public String getKey(RecordBean entity) {
        if(entity != null) {
            return entity.getFileName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecordBean entity) {
        return entity.getFileName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "audioList" to-many relationship of SaveDocBean. */
    public List<RecordBean> _querySaveDocBean_AudioList(String recordId) {
        synchronized (this) {
            if (saveDocBean_AudioListQuery == null) {
                QueryBuilder<RecordBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RecordId.eq(null));
                saveDocBean_AudioListQuery = queryBuilder.build();
            }
        }
        Query<RecordBean> query = saveDocBean_AudioListQuery.forCurrentThread();
        query.setParameter(0, recordId);
        return query.list();
    }

}
