package com.real.doctor.realdoc.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.real.doctor.realdoc.model.ImageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE_BEAN".
*/
public class ImageBeanDao extends AbstractDao<ImageBean, String> {

    public static final String TABLENAME = "IMAGE_BEAN";

    /**
     * Properties of entity ImageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ImgUrl = new Property(1, String.class, "imgUrl", false, "IMG_URL");
        public final static Property SpareImage = new Property(2, int.class, "spareImage", false, "SPARE_IMAGE");
        public final static Property Advice = new Property(3, String.class, "advice", false, "ADVICE");
        public final static Property ImageId = new Property(4, String.class, "imageId", false, "IMAGE_ID");
        public final static Property IsPatient = new Property(5, String.class, "isPatient", false, "IS_PATIENT");
    }

    private Query<ImageBean> imageListBean_MImgUrlListQuery;

    public ImageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ImageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"IMG_URL\" TEXT," + // 1: imgUrl
                "\"SPARE_IMAGE\" INTEGER NOT NULL ," + // 2: spareImage
                "\"ADVICE\" TEXT," + // 3: advice
                "\"IMAGE_ID\" TEXT," + // 4: imageId
                "\"IS_PATIENT\" TEXT);"); // 5: isPatient
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ImageBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(2, imgUrl);
        }
        stmt.bindLong(3, entity.getSpareImage());
 
        String advice = entity.getAdvice();
        if (advice != null) {
            stmt.bindString(4, advice);
        }
 
        String imageId = entity.getImageId();
        if (imageId != null) {
            stmt.bindString(5, imageId);
        }
 
        String isPatient = entity.getIsPatient();
        if (isPatient != null) {
            stmt.bindString(6, isPatient);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ImageBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(2, imgUrl);
        }
        stmt.bindLong(3, entity.getSpareImage());
 
        String advice = entity.getAdvice();
        if (advice != null) {
            stmt.bindString(4, advice);
        }
 
        String imageId = entity.getImageId();
        if (imageId != null) {
            stmt.bindString(5, imageId);
        }
 
        String isPatient = entity.getIsPatient();
        if (isPatient != null) {
            stmt.bindString(6, isPatient);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ImageBean readEntity(Cursor cursor, int offset) {
        ImageBean entity = new ImageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imgUrl
            cursor.getInt(offset + 2), // spareImage
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // advice
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imageId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // isPatient
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ImageBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImgUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSpareImage(cursor.getInt(offset + 2));
        entity.setAdvice(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsPatient(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ImageBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ImageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ImageBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "mImgUrlList" to-many relationship of ImageListBean. */
    public List<ImageBean> _queryImageListBean_MImgUrlList(String imageId) {
        synchronized (this) {
            if (imageListBean_MImgUrlListQuery == null) {
                QueryBuilder<ImageBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ImageId.eq(null));
                imageListBean_MImgUrlListQuery = queryBuilder.build();
            }
        }
        Query<ImageBean> query = imageListBean_MImgUrlListQuery.forCurrentThread();
        query.setParameter(0, imageId);
        return query.list();
    }

}
