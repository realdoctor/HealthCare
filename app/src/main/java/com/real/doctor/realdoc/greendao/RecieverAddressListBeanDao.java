package com.real.doctor.realdoc.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.real.doctor.realdoc.model.RecieverAddressListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECIEVER_ADDRESS_LIST_BEAN".
*/
public class RecieverAddressListBeanDao extends AbstractDao<RecieverAddressListBean, Long> {

    public static final String TABLENAME = "RECIEVER_ADDRESS_LIST_BEAN";

    /**
     * Properties of entity RecieverAddressListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property AddressStr = new Property(3, String.class, "addressStr", false, "ADDRESS_STR");
        public final static Property Daddress = new Property(4, String.class, "daddress", false, "DADDRESS");
    }


    public RecieverAddressListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RecieverAddressListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECIEVER_ADDRESS_LIST_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PHONE\" TEXT," + // 2: phone
                "\"ADDRESS_STR\" TEXT," + // 3: addressStr
                "\"DADDRESS\" TEXT);"); // 4: daddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECIEVER_ADDRESS_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecieverAddressListBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String addressStr = entity.getAddressStr();
        if (addressStr != null) {
            stmt.bindString(4, addressStr);
        }
 
        String daddress = entity.getDaddress();
        if (daddress != null) {
            stmt.bindString(5, daddress);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecieverAddressListBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String addressStr = entity.getAddressStr();
        if (addressStr != null) {
            stmt.bindString(4, addressStr);
        }
 
        String daddress = entity.getDaddress();
        if (daddress != null) {
            stmt.bindString(5, daddress);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecieverAddressListBean readEntity(Cursor cursor, int offset) {
        RecieverAddressListBean entity = new RecieverAddressListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // addressStr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // daddress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecieverAddressListBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddressStr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDaddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecieverAddressListBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecieverAddressListBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecieverAddressListBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
