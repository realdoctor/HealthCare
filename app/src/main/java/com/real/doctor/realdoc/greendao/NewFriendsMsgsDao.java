package com.real.doctor.realdoc.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.real.doctor.realdoc.model.NewFriendsMsgs;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW_FRIENDS_MSGS".
*/
public class NewFriendsMsgsDao extends AbstractDao<NewFriendsMsgs, String> {

    public static final String TABLENAME = "NEW_FRIENDS_MSGS";

    /**
     * Properties of entity NewFriendsMsgs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property GroupId = new Property(2, String.class, "groupId", false, "GROUP_ID");
        public final static Property GroupName = new Property(3, String.class, "groupName", false, "GROUP_NAME");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Reason = new Property(5, String.class, "reason", false, "REASON");
        public final static Property Status = new Property(6, String.class, "status", false, "STATUS");
        public final static Property IsInviteFromMe = new Property(7, String.class, "isInviteFromMe", false, "IS_INVITE_FROM_ME");
        public final static Property GroupInviter = new Property(8, String.class, "groupInviter", false, "GROUP_INVITER");
        public final static Property UnreadMsgCount = new Property(9, String.class, "unreadMsgCount", false, "UNREAD_MSG_COUNT");
    }


    public NewFriendsMsgsDao(DaoConfig config) {
        super(config);
    }
    
    public NewFriendsMsgsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_FRIENDS_MSGS\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"GROUP_ID\" TEXT," + // 2: groupId
                "\"GROUP_NAME\" TEXT," + // 3: groupName
                "\"TIME\" TEXT," + // 4: time
                "\"REASON\" TEXT," + // 5: reason
                "\"STATUS\" TEXT," + // 6: status
                "\"IS_INVITE_FROM_ME\" TEXT," + // 7: isInviteFromMe
                "\"GROUP_INVITER\" TEXT," + // 8: groupInviter
                "\"UNREAD_MSG_COUNT\" TEXT);"); // 9: unreadMsgCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_FRIENDS_MSGS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewFriendsMsgs entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(3, groupId);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(4, groupName);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(6, reason);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
 
        String isInviteFromMe = entity.getIsInviteFromMe();
        if (isInviteFromMe != null) {
            stmt.bindString(8, isInviteFromMe);
        }
 
        String groupInviter = entity.getGroupInviter();
        if (groupInviter != null) {
            stmt.bindString(9, groupInviter);
        }
 
        String unreadMsgCount = entity.getUnreadMsgCount();
        if (unreadMsgCount != null) {
            stmt.bindString(10, unreadMsgCount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewFriendsMsgs entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(3, groupId);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(4, groupName);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(6, reason);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
 
        String isInviteFromMe = entity.getIsInviteFromMe();
        if (isInviteFromMe != null) {
            stmt.bindString(8, isInviteFromMe);
        }
 
        String groupInviter = entity.getGroupInviter();
        if (groupInviter != null) {
            stmt.bindString(9, groupInviter);
        }
 
        String unreadMsgCount = entity.getUnreadMsgCount();
        if (unreadMsgCount != null) {
            stmt.bindString(10, unreadMsgCount);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public NewFriendsMsgs readEntity(Cursor cursor, int offset) {
        NewFriendsMsgs entity = new NewFriendsMsgs( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // groupName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // reason
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // isInviteFromMe
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // groupInviter
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // unreadMsgCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewFriendsMsgs entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroupId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroupName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReason(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsInviteFromMe(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGroupInviter(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUnreadMsgCount(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(NewFriendsMsgs entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(NewFriendsMsgs entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewFriendsMsgs entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
