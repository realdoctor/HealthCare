package com.real.doctor.realdoc.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.real.doctor.realdoc.model.DrugBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DRUG_BEAN".
*/
public class DrugBeanDao extends AbstractDao<DrugBean, String> {

    public static final String TABLENAME = "DRUG_BEAN";

    /**
     * Properties of entity DrugBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DrugCode = new Property(0, String.class, "drugCode", true, "DRUG_CODE");
        public final static Property RecordId = new Property(1, String.class, "recordId", false, "RECORD_ID");
        public final static Property DrugName = new Property(2, String.class, "drugName", false, "DRUG_NAME");
        public final static Property DrugStdCode = new Property(3, String.class, "drugStdCode", false, "DRUG_STD_CODE");
        public final static Property DrugStdName = new Property(4, String.class, "drugStdName", false, "DRUG_STD_NAME");
    }


    public DrugBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DrugBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DRUG_BEAN\" (" + //
                "\"DRUG_CODE\" TEXT PRIMARY KEY NOT NULL ," + // 0: drugCode
                "\"RECORD_ID\" TEXT," + // 1: recordId
                "\"DRUG_NAME\" TEXT," + // 2: drugName
                "\"DRUG_STD_CODE\" TEXT," + // 3: drugStdCode
                "\"DRUG_STD_NAME\" TEXT);"); // 4: drugStdName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DRUG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DrugBean entity) {
        stmt.clearBindings();
 
        String drugCode = entity.getDrugCode();
        if (drugCode != null) {
            stmt.bindString(1, drugCode);
        }
 
        String recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindString(2, recordId);
        }
 
        String drugName = entity.getDrugName();
        if (drugName != null) {
            stmt.bindString(3, drugName);
        }
 
        String drugStdCode = entity.getDrugStdCode();
        if (drugStdCode != null) {
            stmt.bindString(4, drugStdCode);
        }
 
        String drugStdName = entity.getDrugStdName();
        if (drugStdName != null) {
            stmt.bindString(5, drugStdName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DrugBean entity) {
        stmt.clearBindings();
 
        String drugCode = entity.getDrugCode();
        if (drugCode != null) {
            stmt.bindString(1, drugCode);
        }
 
        String recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindString(2, recordId);
        }
 
        String drugName = entity.getDrugName();
        if (drugName != null) {
            stmt.bindString(3, drugName);
        }
 
        String drugStdCode = entity.getDrugStdCode();
        if (drugStdCode != null) {
            stmt.bindString(4, drugStdCode);
        }
 
        String drugStdName = entity.getDrugStdName();
        if (drugStdName != null) {
            stmt.bindString(5, drugStdName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DrugBean readEntity(Cursor cursor, int offset) {
        DrugBean entity = new DrugBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // drugCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // recordId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // drugName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // drugStdCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // drugStdName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DrugBean entity, int offset) {
        entity.setDrugCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRecordId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDrugName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDrugStdCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDrugStdName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DrugBean entity, long rowId) {
        return entity.getDrugCode();
    }
    
    @Override
    public String getKey(DrugBean entity) {
        if(entity != null) {
            return entity.getDrugCode();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DrugBean entity) {
        return entity.getDrugCode() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
