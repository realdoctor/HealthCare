package com.real.doctor.realdoc.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.real.doctor.realdoc.model.ImageListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE_LIST_BEAN".
*/
public class ImageListBeanDao extends AbstractDao<ImageListBean, String> {

    public static final String TABLENAME = "IMAGE_LIST_BEAN";

    /**
     * Properties of entity ImageListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property RecordId = new Property(3, String.class, "recordId", false, "RECORD_ID");
    }

    private DaoSession daoSession;

    private Query<ImageListBean> saveDocBean_ImageListBeansQuery;

    public ImageListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ImageListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE_LIST_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"DATE\" TEXT," + // 1: date
                "\"CONTENT\" TEXT," + // 2: content
                "\"RECORD_ID\" TEXT);"); // 3: recordId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ImageListBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindString(4, recordId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ImageListBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindString(4, recordId);
        }
    }

    @Override
    protected final void attachEntity(ImageListBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ImageListBean readEntity(Cursor cursor, int offset) {
        ImageListBean entity = new ImageListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // recordId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ImageListBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecordId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ImageListBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ImageListBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ImageListBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "imageListBeans" to-many relationship of SaveDocBean. */
    public List<ImageListBean> _querySaveDocBean_ImageListBeans(String recordId) {
        synchronized (this) {
            if (saveDocBean_ImageListBeansQuery == null) {
                QueryBuilder<ImageListBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RecordId.eq(null));
                saveDocBean_ImageListBeansQuery = queryBuilder.build();
            }
        }
        Query<ImageListBean> query = saveDocBean_ImageListBeansQuery.forCurrentThread();
        query.setParameter(0, recordId);
        return query.list();
    }

}
